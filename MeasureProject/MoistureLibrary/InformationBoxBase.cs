namespace InfoBox
{
    public abstract static class InformationBox
    {
        public abstract static InformationBoxResult Show(string text, params object[] parameters);
        public abstract static InformationBoxResult Show(string text, string title = "", string helpFile = "", string helpTopic = "", InformationBoxInitialization initialization = InformationBoxInitialization.FromScopeAndParameters, InformationBoxButtons buttons = InformationBoxButtons.OK, InformationBoxIcon icon = InformationBoxIcon.None, Icon customIcon = null, InformationBoxDefaultButton defaultButton = InformationBoxDefaultButton.Button1, string[] customButtons = null, InformationBoxButtonsLayout buttonsLayout = InformationBoxButtonsLayout.GroupMiddle, InformationBoxAutoSizeMode autoSizeMode = InformationBoxAutoSizeMode.None, InformationBoxPosition position = InformationBoxPosition.CenterOnParent, bool showHelpButton = false, HelpNavigator helpNavigator = HelpNavigator.TableOfContents, InformationBoxCheckBox showDoNotShowAgainCheckBox = 0, InformationBoxStyle style = InformationBoxStyle.Standard, AutoCloseParameters autoClose = null, DesignParameters design = null, InformationBoxTitleIconStyle titleStyle = InformationBoxTitleIconStyle.None, InformationBoxTitleIcon titleIcon = null, MessageBoxButtons? legacyButtons = null, MessageBoxIcon? legacyIcon = null, MessageBoxDefaultButton? legacyDefaultButton = null, InformationBoxBehavior behavior = InformationBoxBehavior.Modal, AsyncResultCallback callback = null, InformationBoxOpacity opacity = InformationBoxOpacity.NoFade, Form parent = null, InformationBoxOrder order = InformationBoxOrder.Default);
        public abstract static InformationBoxResult Show(string text, out CheckState checkBoxState, params object[] parameters);
        public abstract static InformationBoxResult Show(string text, out CheckState checkBoxState, string title = "", string helpFile = "", string helpTopic = "", InformationBoxInitialization initialization = InformationBoxInitialization.FromScopeAndParameters, InformationBoxButtons buttons = InformationBoxButtons.OK, InformationBoxIcon icon = InformationBoxIcon.None, Icon customIcon = null, InformationBoxDefaultButton defaultButton = InformationBoxDefaultButton.Button1, string[] customButtons = null, InformationBoxButtonsLayout buttonsLayout = InformationBoxButtonsLayout.GroupMiddle, InformationBoxAutoSizeMode autoSizeMode = InformationBoxAutoSizeMode.None, InformationBoxPosition position = InformationBoxPosition.CenterOnParent, bool showHelpButton = false, HelpNavigator helpNavigator = HelpNavigator.TableOfContents, InformationBoxCheckBox showDoNotShowAgainCheckBox = 0, InformationBoxStyle style = InformationBoxStyle.Standard, AutoCloseParameters autoClose = null, DesignParameters design = null, InformationBoxTitleIconStyle titleStyle = InformationBoxTitleIconStyle.None, InformationBoxTitleIcon titleIcon = null, MessageBoxButtons? legacyButtons = null, MessageBoxIcon? legacyIcon = null, MessageBoxDefaultButton? legacyDefaultButton = null, InformationBoxBehavior behavior = InformationBoxBehavior.Modal, AsyncResultCallback callback = null, InformationBoxOpacity opacity = InformationBoxOpacity.NoFade, Form parent = null, InformationBoxOrder order = InformationBoxOrder.Default);
    }
}